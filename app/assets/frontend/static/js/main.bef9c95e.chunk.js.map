{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["gitCoinApi","url","api","axios","create","baseURL","headers","X-CSRFToken","withCredentials","transformRequest","data","console","log","authCheck","get","getSession","sessionId","startSession","txHash","post","tx_hash","startSessionConfirmed","endSession","sendJoinRequest","window","signature","main_address","delegate_address","ExpertSessionContext","React","createContext","JoinRequests","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","handleAcceptJoinRequest","joinRequest","props","onAcceptJoinRequest","handleSendJoinRequest","then","res","inherits","createClass","key","value","_this2","joinRequests","map","request","index","react_default","a","createElement","Row","id","className","Col","width","src","profile","avatar_url","handle","isOwner","Button","color","onClick","bind","Container","Component","HostControls","GuestControls","_React$Component4","ExpertSession","child","controls","session","context","user","status","requested_by","App_HostControls","App_GuestControls","md","title","style","whiteSpace","description","App_JoinRequests","interests","handleStartSession","contextType","SessionOverview","Fragment","PendingSession","ActiveSession","App","_this3","state","undefined","websocketConnected","_this4","setState","ChessGameTruffleArtifact","result","JSON","parse","type","App_PendingSession","App_ActiveSession","Provider","build_default","onMessage","handleData","onOpen","App_SessionOverview","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bef9c95e.chunk.js","sourcesContent":["import axios from 'axios';\n\n// axios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n// axios.defaults.xsrfCookieName = \"csrftoken\";\n\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\nexport default function gitCoinApi(url) {\n\n  let api = axios.create({\n    baseURL: url || 'http://localhost:8000/api/v0.1/',\n    // xsrfHeaderName: \"X-CSRFTOKEN\",\n    // xsrfCookieName: \"csrftoken\",\n    headers: {\n      \"X-CSRFToken\": 'idzPRcZECAnufOHrruUjrVMH4fN7DUkfxxn3Xirl08Ozzt1rK29NeNXPyvKVXsav'\n    },\n    withCredentials: true,\n    transformRequest: [\n      (data, headers) => {\n      console.log('transform')\n        console.log(data)\n        console.log(headers)\n      }\n    ]\n  });\n\n  function authCheck() {\n    return api.get('user-info/');\n  }\n\n  function getSession(sessionId) {\n    return api.get('sessions/' + sessionId + '/');\n  }\n\n  function sendJoinRequest(sessionId) {\n    console.log(window);\n    // express intent to join session\n    // sign session data and send to axios\n    return api.post('sessions/' + sessionId + '/join_request/', {\n      signature: '0x0',\n      main_address: '0x0',\n      delegate_address: '0x0'\n    });\n  }\n\n  function startSession(sessionId, txHash) {\n    // Host has broadcast the tx to start the session\n    return api.post('sessions/' + sessionId + '/start/', {\n      tx_hash: txHash\n    });\n  }\n\n  function startSessionConfirmed(sessionId, txHash) {\n    // startSession tx has been confirmed\n    return api.post('sessions/' + sessionId + '/start_confirmed/', {\n      tx_hash: txHash\n    });\n  }\n\n  function endSession(sessionId, txHash) {\n    // Host or guest has ended the session\n    return api.post('sessions/' + sessionId + '/end/');\n  }\n\n  return {\n    authCheck: authCheck,\n    getSession: getSession,\n    startSession: startSession,\n    startSessionConfirmed: startSessionConfirmed,\n    endSession: endSession,\n    sendJoinRequest: sendJoinRequest,\n  }\n}\n","import React from 'react';\nimport {Button, Col, Container, Row} from \"reactstrap\";\nimport gitCoinApi from './api';\nimport Websocket from \"react-websocket\";\n\nimport ChessGameTruffleArtifact from \"./truffle-build/StateChannels\";\n\n\nconst SESSION_STATUS_TESTING = 'o';\n\nexport const ExpertSessionContext = React.createContext({});\n\n\nexport class JoinRequests extends React.Component {\n\n  handleAcceptJoinRequest = (joinRequest) => {\n    console.log(joinRequest)\n    this.props.onAcceptJoinRequest(joinRequest);\n  }\n\n  handleSendJoinRequest = () => {\n    console.log('join')\n    gitCoinApi().sendJoinRequest('1', '0x0').then((res) => {\n      console.log('done')\n      console.log(res)\n    })\n    // this.props.onAcceptJoinRequest(joinRequest);\n  }\n\n  render() {\n    let joinRequests = this.props.joinRequests.map((request, index) => {\n      return <Row key={request.id} className=\"border m-3\">\n        <Col>\n          <img className=\"rounded-circle img-thumbnail\" width={64} src={request.profile.avatar_url}/>\n          {request.profile.handle}\n        </Col>\n        <Col>\n          {this.props.isOwner === true &&\n          <Button color=\"primary\" onClick={this.handleAcceptJoinRequest.bind(this, request)}>Start</Button>\n          }\n        </Col>\n      </Row>\n    });\n    return <div>\n\n      <h2>Offers</h2>\n      {this.props.isOwner === false && <p>\n        <Button color=\"primary\" onClick={this.handleSendJoinRequest.bind(this)}>Offer Expertise</Button>\n      </p>}\n      {joinRequests.length === 0 && <p>No offers yet</p>}\n      {joinRequests.length > 0 && <Container>\n\n        {joinRequests}\n\n\n      </Container>\n      }\n    </div>\n  }\n}\n\nclass HostControls extends React.Component {\n  render() {\n    return (\n      <div>\n        Owner\n      </div>\n    );\n  }\n}\n\nclass GuestControls extends React.Component {\n  render() {\n    return (\n      <div>\n        Guest\n      </div>\n    );\n  }\n}\n\n\nexport class ExpertSession extends React.Component {\n\n  // handleStartSessionClicked = () => {\n  //   console.log('yo')\n  //   // broadcast funding tx, then call this func on submit\n  //   this.props.onSessionStartSubmitted('fo')\n  // };\n\n  render() {\n    // console.log(this.props);\n    let session = this.context.session;\n    let user = this.context.user;\n    let child;\n    if (session.status === SESSION_STATUS_TESTING) {\n      // create child/children here depending on status\n      child = <p>use this for changing display depending on status</p>\n    }\n    let controls;\n    if (user.id === session.requested_by.id) {\n      controls = <HostControls/>\n    } else {\n      controls = <GuestControls/>\n    }\n\n    console.log('user')\n    return <Container>\n      <Row>\n        <Col md=\"5\" className=\"border pt-1 m-3\">\n          <h2>{session.title}</h2>\n          Host: {session.requested_by.handle}\n          <img className=\"rounded-circle img-thumbnail float-right\" width={64} src={session.requested_by.avatar_url}/>\n          <p style={{\"whiteSpace\": \"pre-line\"}}>{session.description}</p>\n\n          <Button color=\"primary\">Offer Expertise</Button>\n\n          <JoinRequests\n            joinRequests={session.interests}\n            handleStartSession={this.props.handleStartSession}\n          />\n        </Col>\n        <Col md=\"5\" className=\"border pt-1 m-3\">\n          <p>Session status</p>\n\n          {/*<p>{this.props.websocketConnected && <p>Connected</p>}*/}\n          {child}\n          <p>if started, duration/time remaining</p>\n          {/*<Button color=\"primary\" onClick={this.handleStartSessionClicked.bind(this)}>Start Session</Button> <br/>*/}\n          <Button color=\"primary\">Start Session</Button> <br/>\n          <Button color=\"danger\">End Session</Button>\n          Started: 35 minutes ago<br/>\n          Cost: $14.23 ($1 per minute)\n\n          {controls}\n\n        </Col>\n      </Row>\n      <Row>\n        <Col md=\"10\" className=\"border pt-1 m-3\">\n          <p>p2p chat</p>\n        </Col>\n      </Row>\n    </Container>\n  }\n}\n\nExpertSession.contextType = ExpertSessionContext;\n\n\nclass SessionOverview extends React.Component {\n  render() {\n    let session = this.context.session;\n    let user = this.context.user;\n\n    let controls;\n    if (user.id === session.requested_by.id) {\n      controls = <HostControls/>\n    } else {\n      controls = <GuestControls/>\n    }\n\n    return (<>\n        <h2>{session.title}</h2>\n        Host: {session.requested_by.handle}\n        <img className=\"rounded-circle img-thumbnail float-right\" width={64} src={session.requested_by.avatar_url}/>\n        <p style={{\"whiteSpace\": \"pre-line\"}}>{session.description}</p>\n\n\n        {controls}\n\n        <JoinRequests\n          joinRequests={session.interests}\n          onAcceptJoinRequest={this.props.onAcceptJoinRequest}\n          isOwner={user.id === session.requested_by.id}\n        />\n      </>\n    );\n  }\n}\n\nSessionOverview.contextType = ExpertSessionContext;\n\n\nclass PendingSession extends React.Component {\n  render() {\n    return (\n      <div>\n        Pending\n      </div>\n    );\n  }\n}\n\nclass ActiveSession extends React.Component {\n  render() {\n    return (\n      <div>\n        Pending\n      </div>\n    );\n  }\n}\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      api: gitCoinApi(),\n      session: undefined,\n      websocketConnected: false,\n      user: undefined\n    };\n\n  }\n\n  componentDidMount() {\n    const sessionId = '123';\n    // get session data from API\n    // should also set user info in context, so it can be faked from stories\n    this.state.api.getSession('1').then((res) => {\n      this.setState({\n        session: res.data\n      });\n    });\n\n    console.log(ChessGameTruffleArtifact);\n\n  }\n\n  handleStartSession() {\n    console.log('starting')\n  };\n\n  handleData(data) {\n    let result = JSON.parse(data);\n    console.log('data')\n    console.log(result)\n\n    switch (result.type) {\n      case \"user_info\":\n        this.setState({user: result.data});\n        break;\n      default:\n        return\n    }\n\n  }\n\n  onOpen(data) {\n    console.log('connected')\n    // let result = JSON.parse(data);\n    console.log(data)\n    this.setState({websocketConnected: true})\n  }\n\n  onAcceptJoinRequest(joinRequest) {\n    console.log('main');\n    console.log(joinRequest);\n  }\n\n  render() {\n    console.log(this.state);\n    if (this.state.session === undefined) {\n      return <div>Loading...</div>\n    }\n\n    let child;\n\n    switch (this.state.session.status) {\n      case SESSION_STATUS_TESTING:\n        child = <PendingSession/>\n        break;\n      case 'TODO active status':\n        child = <ActiveSession/>\n        break;\n      default:\n        return\n    }\n\n\n    return <div className=\"App\">\n      <ExpertSessionContext.Provider value={{\n        session: this.state.session,\n        user: this.state.user\n      }}>\n\n        <Websocket url='ws://localhost:8000/ws/experts/sessions/1/'\n                   onMessage={this.handleData.bind(this)}\n                   onOpen={this.onOpen.bind(this)}\n        />\n\n        {/*{this.state.user !== undefined && <ExpertSession*/}\n        {/*  handleStartSession={this.handleStartSession}*/}\n        {/*  websocketConnected={this.state.websocketConnected}*/}\n        {/*/>*/}\n        {/*}*/}\n        {this.state.websocketConnected || <p>Connecting...</p>}\n        {/*<p>yo</p>*/}\n        {this.state.user !== undefined && <Container>\n          <Row>\n            <Col md=\"5\" className=\"border pt-1 m-3\"><SessionOverview\n              onAcceptJoinRequest={this.onAcceptJoinRequest}\n            /></Col>\n            <Col>{child}</Col>\n          </Row>\n        </Container>}\n\n      </ExpertSessionContext.Provider>\n    </div>\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}