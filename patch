diff --git a/app/assets/v2/js/pages/profile-trust.js b/app/assets/v2/js/pages/profile-trust.js
index 9856cde19..7298c3a3b 100644
--- a/app/assets/v2/js/pages/profile-trust.js
+++ b/app/assets/v2/js/pages/profile-trust.js
@@ -288,6 +288,132 @@ Vue.component('twitter-verify-modal', {
   }
 });
 
+Vue.component('poap-verify-modal', {
+  delimiters: [ '[[', ']]' ],
+  data: function() {
+    return {
+      showValidation: false,
+      validationStep: 'validate-address',
+      ethAddress: '',
+      signature: '',
+      validationError: ''
+    };
+  },
+  mounted: function() {
+ //   this.tweetText = verifyTweetText; // Global from tab_trust.html <script> tag
+
+    $(document).on('click', '#verify-poap-link', function(event) {
+      event.preventDefault();
+      this.showValidation = true;
+    }.bind(this));
+  },
+  template: `<b-modal id="twitter-modal" @hide="dismissVerification()" :visible="showValidation" center hide-header hide-footer>
+                <template v-slot:default="{ hide }">
+                  <div class="mx-5 mt-5 mb-4 text-center">
+                    <div class="mb-3">
+                      <h1 class="font-bigger-4 font-weight-bold">Verify your POAP badges</h1>
+                    </div>
+                    <div v-if="validationStep === 'validate-address'">
+                      <p class="mb-4 font-subheader text-left">
+                        We want to verify your Ethereum account. To do so, you must first send a standardized
+                        Tweet from your account, then we'll validate it's there.
+                      </p>
+                      <div class="mt-2 mb-2">
+                        <a :href="tweetIntentURL" @click="clickedPullEthAddress" role="button" style="font-size: 1.3em" class="button button--primary mb-2" target="_blank">
+                          Pull Ethereum address
+                        </a>
+                      </div>
+                    </div>
+                    <div v-if="validationStep === 'validate-poap' || validationStep == 'perform-validation'">
+                      <p class="mb-4">
+                        Now we'll validate that you have the poap. Press validate.
+                      </p>
+                      <div class="input-group">
+                        <div class="input-group-prepend">
+                          <span class="input-group-text form-control" id="basic-addon1">@</span>
+                        </div>
+                        <input type="text" class="form-control" placeholder="eth-address" aria-label="handle" aria-describedby="basic-addon1" required maxlength="255" v-model="ethAddress">
+                      </div>
+                      <div v-if="validationError !== ''" style="color: red">
+                        <small>[[validationError]]</small>
+                      </div>
+                      <b-button @click="clickedValidate" :disabled="validationStep === 'perform-validation'" class="btn-gc-blue mt-3 mb-2" size="lg">
+                        <b-spinner v-if="validationStep === 'perform-validation'" type="grow"></b-spinner>
+                        Validate
+                      </b-button>
+                      <br />
+                      <a href="" v-if="validationError !== ''" @click="clickedGoBack">
+                        Go Back
+                      </a>
+                    </div>
+                    <div v-if="validationStep === 'validation-complete'">
+                      Your POAP verification was successful. Thank you for helping make Gitcoin more sybil resistant!
+                      <a href="" class="btn btn-gc-blue px-5 mt-3 mb-2 mx-2" role="button" style="font-size: 1.3em">Done</a>
+                    </div>
+                  </div>
+                </template>
+            </b-modal>`,
+  methods: {
+    dismissVerification() {
+      this.showValidation = false;
+    },
+    clickedGoBack(event) {
+      event.preventDefault();
+      this.validationStep = 'validate-address';
+      this.ethAddress = ''
+      this.validationError = '';
+    },
+    clickedPullEthAddress(event) {
+      // Prompt web3 login if not connected
+      if (!provider) {
+        await onConnect();
+      }
+      // Initialization complete, return address of current user
+      const ethAddress = (await web3.eth.getAccounts())[0];
+      // Create a signature using the provided web3 account
+      web3.eth.sign(web3.eth.defaultAccount, web3.sha3('signature'), function (err, signature) {
+          if (err) {
+              this.validationStep="validate-address";
+              this.validationError=err;
+          }else{
+             this.signature = signature;
+             this.ethAddress = ethAddress;
+             this.validationStep = 'validate-poap';
+          }
+
+      });
+    },
+    clickedValidate(event) {
+      event.preventDefault();
+      this.validationError = '';
+      this.validationStep = 'perform-validation';
+      this.verifyPOAP();
+    },
+    verifyPOAP() {
+      const csrfmiddlewaretoken = document.querySelector('[name=csrfmiddlewaretoken]').value;
+      const payload = JSON.stringify({
+        'eth_address': this.ethAddress,
+        'signature': this.signature 
+      });
+      const headers = {'X-CSRFToken': csrfmiddlewaretoken};
+
+      const verificationRequest = fetchData(`/api/v0.1/profile/${trustHandle}/verify_eth_account`, 'POST', payload, headers);
+
+      $.when(verificationRequest).then(response => {
+        if (response.ok) {
+          this.validationStep = 'validation-complete';
+        } else {
+          this.validationError = response.msg;
+          this.validationStep = 'validate-address';
+        }
+
+      }).catch((_error) => {
+        this.validationError = 'There was an error; please try again later';
+        this.validationStep = 'validate-address';
+      });
+    }
+  }
+});
 // TODO: This component consists primarily of code taken from the SMS verification flow in the cart.
 // This approach is not DRY, and after Grants Round 7 completes, the cart should be refactored to include
 // this as a shared component, rather than duplicating the code.
@@ -517,4 +643,4 @@ if (document.getElementById('gc-trust-verify-modal')) {
     el: '#gc-trust-verify-modal',
     data: { }
   });
-}
\ No newline at end of file
+}
diff --git a/app/dashboard/models.py b/app/dashboard/models.py
index fca209fd2..afca1d61c 100644
--- a/app/dashboard/models.py
+++ b/app/dashboard/models.py
@@ -2900,6 +2900,8 @@ class Profile(SuperModel):
     brightid_uuid=models.UUIDField(default=uuid.uuid4, unique=True)
     is_brightid_verified=models.BooleanField(default=False)
     is_twitter_verified=models.BooleanField(default=False)
+    is_poap_verified=models.BooleanField(default=False)
+    poap_badges=ArrayField(models.IntegerField(), blank=True, default=list)
     twitter_handle=models.CharField(blank=True, null=True, max_length=15)
     bio = models.TextField(default='', blank=True, help_text=_('User bio.'))
     interests = ArrayField(models.CharField(max_length=200), blank=True, default=list)
@@ -5565,6 +5567,11 @@ def investigate_sybil(instance):
             total_sybil_score -= 1
             htmls.append('(REDEMPTIONx1)')
 
+        htmls.append(f'POAP Verified: {instance.is_poap_verified}')
+        if instance.is_poap_verified:
+            total_sybil_score -= 1
+            htmls.append('(REDEMPTIONx1)')
+
         if instance.squelches.filter(active=True).exists():
             htmls.append('USER HAS ACTIVE SQUELCHES')
             total_sybil_score += 3
diff --git a/app/dashboard/templates/profiles/tab_trust.html b/app/dashboard/templates/profiles/tab_trust.html
index ef75dc488..161153d2d 100644
--- a/app/dashboard/templates/profiles/tab_trust.html
+++ b/app/dashboard/templates/profiles/tab_trust.html
@@ -143,7 +143,37 @@
 
       {% include "profiles/trust_soon_row.html" with service="Activity on Gitcoin" %}
       {% include "profiles/trust_soon_row.html" with service="Idena Network" %}
-      {% include "profiles/trust_soon_row.html" with service="POAP" %}
+      <!-- POAP ROW -->
+      <div class="row mt-2 mb-4">
+        <div class="col-12 col-md-1 mx-auto text-center pt-1">
+          <span style="color: #00aced">
+            <i class="fab fa-poap fa-3x" aria-hidden="true"></i>
+          </span>
+        </div>
+        <div class="col-12 col-md-7 mb-3 mb-md-0">
+          <div class="font-weight-bold">
+            Verify With POAP
+          </div>
+          <div>
+            Verify your POAP badges.
+          </div>
+        </div>
+        <div class="col-6 col-md-2 text-center">
+          <div class="font-weight-bold">
+            +5%
+          </div>
+          <div style="color:grey">
+            <small>Grants CLR Match</small>
+          </div>
+        </div>
+        <div class="col-6 col-md-2">
+          {% if is_poap_verified %}
+            <span style="color:limegreen"><i class="fas fa-check"></i> Verified</span>
+          {% else %}
+            <a href="" role="button" id="verify-poap-link" class="button button--primary text-nowrap">Verify</a>
+          {% endif %}
+        </div>
+      </div>
       {% include "profiles/trust_soon_row.html" with service="Upala" %}
       {% include "profiles/trust_soon_row.html" with service="Duniter" %}
       {% include "profiles/trust_soon_row.html" with service="Equality Protocol" %}
diff --git a/app/dashboard/utils.py b/app/dashboard/utils.py
index 522a9aa20..1c271a228 100644
--- a/app/dashboard/utils.py
+++ b/app/dashboard/utils.py
@@ -381,7 +381,21 @@ def getBountyContract(network):
     getBountyContract = web3.eth.contract(standardbounties_addr, abi=bounty_abi)
     return getBountyContract
 
+def get_poap_contract_addresss(network):
+    if network == 'mainnet':
+        return to_checksum_address('0x22C1f6050E56d2876009903609a2cC3fEf83B415')
+    elif network == 'ropsten':
+        return to_checksum_address('0x50C5CA3e7f5566dA3Aa64eC687D283fdBEC2A2F2')
+    raise UnsupportedNetworkException(network)
 
+
+def get_poap_contract(network):
+    web3 = get_web3(network)
+    poap_abi = '[{"constant":true,"inputs":[{"name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"eventId","type":"uint256"}],"name":"renounceEventMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"eventId","type":"uint256"},{"name":"account","type":"address"}],"name":"removeEventMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"account","type":"address"}],"name":"isAdmin","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"eventId","type":"uint256"},{"name":"account","type":"address"}],"name":"isEventMinter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"unpause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"paused","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"}],"name":"addAdmin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"pause","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceAdmin","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"eventId","type":"uint256"},{"name":"account","type":"address"}],"name":"addEventMinter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"eventId","type":"uint256"},{"indexed":false,"name":"tokenId","type":"uint256"}],"name":"EventToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"AdminAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"account","type":"address"}],"name":"AdminRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"eventId","type":"uint256"},{"indexed":true,"name":"account","type":"address"}],"name":"EventMinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"eventId","type":"uint256"},{"indexed":true,"name":"account","type":"address"}],"name":"EventMinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"approved","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"operator","type":"address"},{"indexed":false,"name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"tokenEvent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"index","type":"uint256"}],"name":"tokenDetailsOfOwnerByIndex","outputs":[{"name":"tokenId","type":"uint256"},{"name":"eventId","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"eventId","type":"uint256"},{"name":"to","type":"address"}],"name":"mintToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"eventId","type":"uint256"},{"name":"to","type":"address[]"}],"name":"mintEventToManyUsers","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"eventIds","type":"uint256[]"},{"name":"to","type":"address"}],"name":"mintUserToManyEvents","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"__name","type":"string"},{"name":"__symbol","type":"string"},{"name":"__baseURI","type":"string"},{"name":"admins","type":"address[]"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"sender","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]'
+    poap_addr = get_poap_contract_addresss(network)
+    poap_abi = json.loads(poap_abi)
+    poapContract = web3.eth.contract(poap_addr, abi=poap_abi)
+    return poapContract
 def get_bounty(bounty_enum, network):
     if (settings.DEBUG or settings.ENV != 'prod') and network == 'mainnet':
         # This block will return {} if env isn't prod and the network is mainnet.
diff --git a/app/dashboard/views.py b/app/dashboard/views.py
index b47ef1a17..b2e4fa524 100644
--- a/app/dashboard/views.py
+++ b/app/dashboard/views.py
@@ -78,7 +78,7 @@
 from dashboard.tasks import increment_view_count
 from dashboard.utils import (
     ProfileHiddenException, ProfileNotFoundException, build_profile_pairs, get_bounty_from_invite_url, get_orgs_perms,
-    profile_helper,
+    profile_helper, get_poap_contract
 )
 from economy.utils import ConversionRateNotFoundError, convert_amount, convert_token_to_usdt
 from eth_utils import to_checksum_address, to_normalized_address
@@ -2908,6 +2908,7 @@ def get_profile_tab(request, profile, tab, prev_context):
             context['upcoming_calls'] = []
 
         context['is_sms_verified'] = profile.sms_verification
+        context['is_poap_verified'] = profile.is_twitter_verified
         context['is_twitter_verified'] = profile.is_twitter_verified
         context['verify_tweet_text'] = verify_text_for_tweet(profile.handle)
     else:
@@ -6189,3 +6190,33 @@ def events(request, hackathon):
     return JsonResponse({
         'events': events,
     })
+
+from web3.auto import w3
+
+# If you have the original message, you need to hash it first
+from eth_account.messages import defunct_hash_message
+
+@login_required
+@require_GET
+def verify_user_poap(request):
+    # TODO any catch exception here?
+    signature = request.GET['signature']
+    eth_address = equest.GET['eth_address']
+    message_hash = defunct_hash_message(text="signature")
+    signer = w3.eth.account.recoverHash(message_hash, signature=signature)
+    if signature != signer:
+            return JsonResponse({
+                'ok': False,
+                'message': 'Invalid signer',
+            })
+
+    poap_contract = get_poap_contract()
+    tokens = poap_contract.functions.balanceOf(signer).call()
+    if "there is a token older than 15 days ago, blah blah":
+        profile = profile_helper(request.user.username, True)
+        profile.is_poap_verified = True
+        profile.poap_badges = list(tokens)
+        profile.save()
+    return redirect('profile_by_tab', 'trust')
+
+
diff --git a/docker-compose.yml b/docker-compose.yml
index 0abd19d9e..dd2172ba1 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -76,7 +76,7 @@ services:
     volumes:
       - .:/code
     ports:
-      - "8000:8000"
+      - "127.0.0.1:8000:8000"
       - "3030:3030"
     depends_on:
       - db
